generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  password          String
  email             String    @unique
  hasNotifications  Boolean   @default(false)
  welcomeSent       Boolean   @default(false)
  passcode          String?
  passcodeExpiresAt DateTime?
  createdAt         DateTime  @default(now())

  initialBalance Decimal @default(100000)
  balance        Decimal @default(100000)
  profits        Decimal @default(0)

  holdings      Holding[]
  trades        Trade[]
  transactions  Transaction[]
  notifications Notification[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Holding {
  id        String   @id @default(uuid())
  symbol    String
  name      String?
  quantity  Decimal  @default(0)
  avgPrice  Decimal  @default(0)
  userId    String
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("holdings")
}

model Trade {
  id        String     @id @default(uuid())
  symbol    String
  name      String?
  type      TRADE_TYPE
  quantity  Decimal
  price     Decimal
  profits   Decimal?
  createdAt DateTime   @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("trades")
}

model Transaction {
  id        String           @id @default(uuid())
  type      TRANSACTION_TYPE
  amount    Decimal
  createdAt DateTime         @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("transactions")
}

model Notification {
  id        String            @id @default(uuid())
  title     String
  content   String
  type      NOTIFICATION_TYPE
  createdAt DateTime          @default(now())
  userId    String
  isViewed  Boolean           @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@map("refresh_tokens")
}

enum NOTIFICATION_TYPE {
  WELCOME
  SUCCESS
  INFO
  WARNING
  ERROR
}

enum TRANSACTION_TYPE {
  DEPOSIT
  WITHDRAWAL
}

enum TRADE_TYPE {
  BUY
  SELL
}
