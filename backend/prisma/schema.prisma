generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  password          String
  email             String         @unique
  hasNotifications  Boolean        @default(true)
  passcode          String?
  passcodeExpiresAt DateTime?
  createdAt         DateTime       @default(now())
  initialBalance    Decimal        @default(100000)
  balance           Decimal        @default(100000)
  profits           Decimal        @default(0)
  holdings          Holding[]
  notifications     Notification[]
  refreshTokens     RefreshToken[]
  trades            Trade[]
  transactions      Transaction[]

  @@map("users")
}

model Holding {
  id        String   @id @default(uuid())
  symbol    String
  name      String?
  quantity  Decimal  @default(0)
  avgPrice  Decimal  @default(0)
  userId    String
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("holdings")
}

model Trade {
  id        String     @id @default(uuid())
  symbol    String
  name      String?
  type      TRADE_TYPE
  quantity  Decimal
  price     Decimal
  profit    Decimal?
  createdAt DateTime   @default(now())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("trades")
}

model Transaction {
  id        String           @id @default(uuid())
  type      TRANSACTION_TYPE
  amount    Decimal
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("transactions")
}

model Notification {
  id        String            @id @default(uuid())
  title     String
  content   String
  type      NOTIFICATION_TYPE
  createdAt DateTime          @default(now())
  userId    String
  isViewed  Boolean           @default(false)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("refresh_tokens")
}

model x_chats {
  id                               String       @id
  createdAt                        DateTime     @default(now())
  updatedAt                        DateTime     @default(now())
  user1Id                          String
  user2Id                          String
  user1HasRead                     Boolean      @default(true)
  user2HasRead                     Boolean      @default(true)
  x_users_x_chats_user1IdTox_users x_users      @relation("x_chats_user1IdTox_users", fields: [user1Id], references: [id])
  x_users_x_chats_user2IdTox_users x_users      @relation("x_chats_user2IdTox_users", fields: [user2Id], references: [id])
  x_messages                       x_messages[]

  @@unique([user1Id, user2Id])
}

model x_follows {
  id                                     String   @id
  createdAt                              DateTime @default(now())
  followingId                            String
  followerId                             String
  x_users_x_follows_followerIdTox_users  x_users  @relation("x_follows_followerIdTox_users", fields: [followerId], references: [id])
  x_users_x_follows_followingIdTox_users x_users  @relation("x_follows_followingIdTox_users", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}

model x_likes {
  id        String    @id
  createdAt DateTime  @default(now())
  userId    String
  tweetId   String?
  x_tweets  x_tweets? @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  x_users   x_users   @relation(fields: [userId], references: [id])

  @@unique([userId, tweetId])
  @@index([userId, tweetId])
}

model x_messages {
  id                                     String   @id
  content                                String
  createdAt                              DateTime @default(now())
  senderId                               String
  receiverId                             String
  chatId                                 String?
  x_chats                                x_chats? @relation(fields: [chatId], references: [id], onDelete: Cascade)
  x_users_x_messages_receiverIdTox_users x_users  @relation("x_messages_receiverIdTox_users", fields: [receiverId], references: [id])
  x_users_x_messages_senderIdTox_users   x_users  @relation("x_messages_senderIdTox_users", fields: [senderId], references: [id])

  @@index([chatId, createdAt])
  @@index([receiverId, createdAt])
  @@index([senderId, createdAt])
}

model x_notifications {
  id                                          String           @id
  type                                        NotificationType
  isViewed                                    Boolean          @default(false)
  isSent                                      Boolean          @default(false)
  createdAt                                   DateTime         @default(now())
  fromUserId                                  String
  toUserId                                    String
  tweetId                                     String?
  x_users_x_notifications_fromUserIdTox_users x_users          @relation("x_notifications_fromUserIdTox_users", fields: [fromUserId], references: [id])
  x_users_x_notifications_toUserIdTox_users   x_users          @relation("x_notifications_toUserIdTox_users", fields: [toUserId], references: [id])
  x_tweets                                    x_tweets?        @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, tweetId, type])
  @@unique([tweetId, type])
  @@index([isViewed])
  @@index([type, fromUserId, toUserId])
}

model x_refresh_token_sockets {
  id               String           @id
  refreshTokenId   String
  socketId         String
  createdAt        DateTime         @default(now())
  x_refresh_tokens x_refresh_tokens @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  @@index([refreshTokenId])
}

model x_refresh_tokens {
  id                      String                    @id
  token                   String
  ip                      String?
  device                  String?
  socketId                String?
  createdAt               DateTime                  @default(now())
  expiresAt               DateTime
  userId                  String
  x_refresh_token_sockets x_refresh_token_sockets[]
  x_users                 x_users                   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model x_sessions {
  id        String   @id
  token     String
  ip        String?
  device    String?
  createdAt DateTime @default(now())
  userId    String
  x_users   x_users  @relation(fields: [userId], references: [id])

  @@index([userId])
}

model x_tweet_media {
  id        String    @id
  path      String
  type      MediaType
  createdAt DateTime  @default(now())
  tweetId   String
  x_tweets  x_tweets  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model x_tweets {
  id                                                String            @id
  content                                           String?
  createdAt                                         DateTime          @default(now())
  authorId                                          String
  originalTweetId                                   String?
  parentTweetId                                     String?
  x_likes                                           x_likes[]
  x_notifications                                   x_notifications[]
  x_tweet_media                                     x_tweet_media[]
  x_users                                           x_users           @relation(fields: [authorId], references: [id])
  x_tweets_x_tweets_originalTweetIdTox_tweets       x_tweets?         @relation("x_tweets_originalTweetIdTox_tweets", fields: [originalTweetId], references: [id], onDelete: Cascade)
  other_x_tweets_x_tweets_originalTweetIdTox_tweets x_tweets[]        @relation("x_tweets_originalTweetIdTox_tweets")
  x_tweets_x_tweets_parentTweetIdTox_tweets         x_tweets?         @relation("x_tweets_parentTweetIdTox_tweets", fields: [parentTweetId], references: [id], onDelete: Cascade)
  other_x_tweets_x_tweets_parentTweetIdTox_tweets   x_tweets[]        @relation("x_tweets_parentTweetIdTox_tweets")

  @@index([authorId])
}

model x_users {
  id                                                  String             @id
  username                                            String?            @unique
  name                                                String
  email                                               String             @unique
  password                                            String
  bio                                                 String?
  hasNotifications                                    Boolean            @default(false)
  hasUnreadMessages                                   Boolean            @default(false)
  profilePicture                                      String?
  coverImage                                          String?
  isVerified                                          Boolean            @default(false)
  isProtected                                         Boolean            @default(false)
  passcode                                            String?
  passcodeExpiresAt                                   DateTime?
  createdAt                                           DateTime           @default(now())
  x_chats_x_chats_user1IdTox_users                    x_chats[]          @relation("x_chats_user1IdTox_users")
  x_chats_x_chats_user2IdTox_users                    x_chats[]          @relation("x_chats_user2IdTox_users")
  x_follows_x_follows_followerIdTox_users             x_follows[]        @relation("x_follows_followerIdTox_users")
  x_follows_x_follows_followingIdTox_users            x_follows[]        @relation("x_follows_followingIdTox_users")
  x_likes                                             x_likes[]
  x_messages_x_messages_receiverIdTox_users           x_messages[]       @relation("x_messages_receiverIdTox_users")
  x_messages_x_messages_senderIdTox_users             x_messages[]       @relation("x_messages_senderIdTox_users")
  x_notifications_x_notifications_fromUserIdTox_users x_notifications[]  @relation("x_notifications_fromUserIdTox_users")
  x_notifications_x_notifications_toUserIdTox_users   x_notifications[]  @relation("x_notifications_toUserIdTox_users")
  x_refresh_tokens                                    x_refresh_tokens[]
  x_sessions                                          x_sessions[]
  x_tweets                                            x_tweets[]
}

enum NOTIFICATION_TYPE {
  WELCOME
  SUCCESS
  INFO
  WARNING
  ERROR
}

enum TRANSACTION_TYPE {
  DEPOSIT
  WITHDRAWAL
}

enum TRADE_TYPE {
  BUY
  SELL
}

enum MediaType {
  IMAGE
  VIDEO
}

enum NotificationType {
  FOLLOW
  LIKE
  REPLY
  MENTION
  RETWEET
  WELCOME
}
